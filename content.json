{"pages":[],"posts":[{"title":"【快速上車 FastAPI，感受開發快感】 - 快速感受 FastAPI","text":"Purpose: 快速上手和了解 FastAPI，所以會盡量講解常用到的 API 設定，會避免一些比較深入的設定 此章節主要會從環境安裝開始，簡單走一遍 FastAPI 啟動服務的流程 Outline 環境要求 FastAPI 需要的工具 環境 Setup 建立 Fast instance Execute fastapi web application server 環境要求Python 3.7 FastAPI 需要的工具 Pydantic Uvicorn 環境 Setup 開始之前，也可以先建立虛擬環境進行開發，可以參考 virtualenv 安裝 fastapi 和 uvicorn 12$ pip install fastapi$ pip install uvicorn 如果懶得個別安裝，也可以直接安裝完整工具包 1$ pip3 install fastapi[all] uvicorn 是什麼? uvicorn 是一個使用 uvloop and httptools 實現 ASGI 的 HTTP Server，而 FastAPI 基於 Startlette 框架建構，以及 Starlette 框架屬於實現 ASGI 的框架，如果需要執行 ASGI Web Application，就得需要有支援 ASGI 的 HTTP Server 詳細可以參考 uvicorn 建立 Fast instance 在指定目錄內建立一個 main.py 檔案 1$ mkdir fastapi_pratice 建立 FastAPI instance 12345# import FastAPI modulefrom fastapi import FastAPI# 建立 FastAPI instanceapp = FastAPI() 定義一個 GET method 的 api endpoint 及命名 api path 123@app.get('/')def foo(): return 'Hi this is a test.' 解析上述程式碼: @app 是一個 path operation decorator，可以指定要執行哪一個 path operation GET: @app.get POST: @app.post PUT: @app.put PATCH: @app.patch DELETE: @app.delete foo() 執行函式，主要描述需要實現的邏輯。在 FastAPI 會把這類函式統一以 path operation function 表達 所以整段程式碼是在表達，在 foo() 上面套用 @app，主要是告訴 FastAPI foo() 會對應路徑為 '/' api path，當 FastAPI Application Server 收到 HTTP request 為 /時會呼叫 foo() path operation 是什麼? decorator 是什麼? Execute fastapi web application server當 WEB Application 執行檔時先完成之後，便能執行 1$ uvicorn main:app --reload 解析上述指令: main 為指定 fastapi 進入點的執行檔案 e.g main.py app 為指定該執行檔案內，所宣告為 FastAPI instance 的變數，從上述來看我們命名 app variable 為 FastAPI instance --reload 為指定 uvicorn 每次只要 fastapi 程式碼有任何更動，都需要重新啟動 Server已同步更新更正內容，通常只在進行開發時使用 For example: 我將 fastapi 進入點檔案命名為 app.py，並且在檔案內建立一個 FastAPI instance，並 assign 給命名為 app 的變數，所以當我需要啟動 server 時，就需要輸入 $ uvicorn app:app 此時前往 http://127.0.0.1:8000/docs 便能看到所產生的 Open API 文件(Swagger)，而 API 文件本身可以進行互動操作，所以未來開發的任何一支 API 如果想要進行手動測試，便可以直接在上面操作 現在應該大概了解 FastAPI 的使用流程，下一個章節則會介紹如果要實現一個讀取資料的 RESTful API，該知道哪些設定以及定義呢? Reference此篇內容參考以下: FastAPI Official - First Step","link":"/2021/01/09/fastapi-ch1/"},{"title":"【快速上車 FastAPI，感受開發快感】 - FastAPI 介紹","text":"FastAPI introductionPython 除了 Flask、Django REST framework 之外，目前又多了一個新的 WEB開發框架可以選擇 - FastAPI FastAPI 主打開發快速、效能快速的 WEB 開發框架，目前星星也在快速成長當中 因為之前專案以 FastAPI 進行開發，所以打算把之前對 FastAPI的理解，寫成一個系列文章 不過本人還很菜，所以決定這次系列主題，會以剛學會程式語言的新手或是 Junior工程師為主要對象 每個章節都會針對技術名詞，做簡單介紹和引用參考，並且會集中說明 FastAPI 的使用術語，一步步無痛引導讀者感受 FastAPI 的好處 現在就開始進入系列主題，【快速上車 FastAPI，感受開發快感】 Outline FastAPI 是什麼? FastAPI 特色 FastAPI 的優點、缺點 What is FastAPI FastAPI framework, high performance, easy to learn, fast to code, ready for production FastAPI 是一個容易上手，並且可以快速開發高效能 WEB API 的框架 從字面上來看 high performance: FastAPI 基於 ASGI framework 建構，可以建立 Async I/O 服務，提供更快速的效能 easy to learn: FastAPI 在初始設計時，便是以容易上手為其中一個目的，除了官方文件寫得清楚之外，模組使用及程式碼描述也具有 intuitive直覺性 fast to code: FastAPI 沒有太多框架提供的特殊語法，大多使用 Python 內建語法及模組，減少額外學習成本；另一方面，FastAPI 在模組使用及程式碼描述上也很 intuitive直覺，開發者可以很快速熟悉框架 另外，FastAPI 完全基於 Python 3.6 版本開發，可以使用許多 Python 3.6 新加入的功能: f-string、type hint FastAPI 特色FastAPI 的作者研究許多知名的開源專案，獲取各個開源工具的優點及設計哲學，經過徹底研究之後，才開發出 FastAPI 框架 以下是 FastAPI 主要特色: FastAPI 完全基於 Python 3.6 版本開發，只支援 Python 3.6 以上的版本 FastAPI 整個框架遵循 Open standard 設計，可以自動產生 Open API 規格的 API 文件 e.g Swagger FastAPI 基於 Starlette 建構，負責處理 Web gateway interface，包括 API path、 FastAPI 基於 Pydantic 建購，負責處理資料輸入/輸出的型別驗證及轉換，使用範圍包括 Database model Open Standard? Open API 是指 Open StandardSwagger 實際上是基於 Open API規格所設計的工具，可以產生 API文件 Starlette 是什麼? 可以做甚麼? 好處在哪? Starlette 是一個 lightweight ASGI framework/toolkit 適合建立 high performance asyncio service，需要搭配 ASGI server 使用 e.g uvicorn 詳細可以參考 Starlette ASGI 是什麼? ASGI (Asynchronous Server Gateway Interface) is a spiritual successor to WSGI, intended to provide a standard interface between async-capable Python web servers, frameworks, and applications. ASGI 全名為 Asynchronous Server Gateway Interface，just a little difference with WSGI (Web Server Gateway Interface)，可以在具有 async 功能的 Python web servers、frameworks、applications 之間提供 standard interface uvicorn 是什麼? uvicorn 是一個使用 uvloop and httptools 實現 ASGI 的 Http Server 詳細可以參考 uvicorn Pydantic 是什麼? Pydantic 是一個使用 python type annotations 來進行資料驗證和設定的管理工具，可以強制在 runtime 執行 type hint，並針對無效的資料提供 user friendly 的錯誤訊息 詳細可以參考 Pydantic 還有一些在開發時，覺得很好用的特點 Editor 支援提供 auto-complete的功能 以上就是 FastAPI 的介紹和特色，之前使用的經驗是，對於需要快速開發 API 服務，並且 API 服務啟動後可以直接提供 Swagger API 文件這一點，有非常驚豔的感受。因為作為開發者，不用再另外處理 Open API 套件鑲入來提供 API 文件，而且一般開發時所描述的資料型別及 docstring，可以直接呈現在 API 文件上的資訊描述，等於是開發者本身在規範程式碼，清楚描述程式碼的同時，便可以直接透過自動生成的 API 文件來反映開發者對於文件描述的程度 Reference FastAPI","link":"/2021/01/09/fastapi-ch0/"}],"tags":[{"name":"FastAPI","slug":"FastAPI","link":"/tags/FastAPI/"},{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"}]}